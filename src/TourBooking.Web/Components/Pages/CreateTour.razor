@attribute [Route(ToursWebEndpoints.CreateTourPath)]
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using TourBooking.ApiService.Contracts
@using TourBooking.ApiService.Contracts.Models
@using TourBooking.Web.Contracts
@inject ToursApiClient ToursApi

<PageTitle>Create Tour</PageTitle>

<h1>Create Tour</h1>

@if (!RendererInfo.IsInteractive)
{
    <p>Connecting to the assistant...</p>
}
else
{
    <p>Creates a tour.</p>

    <EditForm Model="@_tourModel" OnValidSubmit="OnCreateTour" FormName="CreateTourForm">
        <fieldset disabled="@(!RendererInfo.IsInteractive)">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" class="form-control" @bind-Value="_tourModel.Name" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputText id="description" class="form-control" @bind-Value="_tourModel.Description" />
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price</label>
                <InputNumber id="price" class="form-control" @bind-Value="_tourModel.Price" />
            </div>
            <div class="mb-3">
                <label for="startDate" class="form-label">Start Date</label>
                <InputDate id="startDate" class="form-control" @bind-Value="_tourModel.StartDate" />
            </div>
            <div class="mb-3">
                <label for="endDate" class="form-label">End Date</label>
                <InputDate id="endDate" class="form-control" @bind-Value="_tourModel.EndDate" />
            </div>
            <button type="submit" class="btn btn-primary">Create Tour</button>
        </fieldset>
    </EditForm>

    @if (!string.IsNullOrEmpty(_message))
    {
        <div class="alert alert-success mt-3">@_message</div>
    }
}

@code {
    private CreateTourModel _tourModel = new();
    private string? _message;

    private async Task OnCreateTour()
    {
        await ToursApi.CreateTour(new CreateTourDto(
            _tourModel.Name,
            _tourModel.Description,
            _tourModel.Price,
            _tourModel.StartDate,
            _tourModel.EndDate
        ), CancellationToken.None);
        _message = "Tour created successfully!";
        _tourModel = new CreateTourModel();
    }

    internal class CreateTourModel
    {
        [Length(3, 100, ErrorMessage = "Name must be between 3 and 100 characters long.")]
        public string Name { get; set; } = string.Empty;
        [Length(10, 500, ErrorMessage = "Description must be between 10 and 500 characters long.")]
        public string Description { get; set; } = string.Empty;
        [Range(0, double.MaxValue, MinimumIsExclusive = true, ErrorMessage = "Price must be greater than zero.")]
        public decimal Price { get; set; }
        public DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
        public DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
    }
}
